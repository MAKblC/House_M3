/*
–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∞–¥—Ä–µ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –∑–∞–≤–∏—Å–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏!  
*/
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

#define WIFI_SSID "MGBot"
#define WIFI_PASSWORD "Terminator812"
// —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
#define BOT_TOKEN "6373693891:AAG41EIiBxLpRTPJLOcrWxQIAV-6oe0qjNI"

// —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
String test_photo_url = "https://mgbot.ru/upload/logo-r.png";

// –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–º–æ—â—å—é InlineKeyboard
String keyboardJson1 = "[[{ \"text\" : \"–í–∞—à —Å–∞–π—Ç\", \"url\" : \"https://mgbot.ru\" }],[{ \"text\" : \"–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç IoTik.ru\", \"url\" : \"https://www.iotik.ru\" }]]";

WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);
unsigned long bot_lasttime;
const unsigned long BOT_MTBS = 1000; // –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

#include <FastLED.h>
#define NUM_LEDS 10
CRGB leds[NUM_LEDS];
#define LED_PIN 18
#define COLOR_ORDER GRB
#define CHIPSET WS2812

#include <ESP32_Servo.h>
Servo window;
Servo gates;
#define OPENED_GATES 70
#define CLOSED_GATES 30
#define OPENED_WINDOW 30
#define CLOSED_WINDOW 70

#define WHITE_LED 17
#define WIND 16
#define BUTTON 19  // –ø–∏–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
int buttonState;   // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏

#include <Wire.h>

#include <Adafruit_MCP4725.h>
Adafruit_MCP4725 buzzer;
int vol1 = 1000;
int vol2 = 100;  // —Ä–∞–∑–Ω–∏—Ü–∞ –∑–Ω–∞—á–µ–Ω–∏–π = –≥—Ä–æ–º–∫–æ—Å—Ç—å
int ton;

#include <I2C_graphical_LCD_display.h>
I2C_graphical_LCD_display lcd;

#include <BH1750.h>
BH1750 lightMeter;

#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
Adafruit_BME280 bme280;

#include <VL53L0X.h>
VL53L0X lox;

#include <MGS_FR403.h>
MGS_FR403 Fire;

#include <Adafruit_MPU6050.h>
Adafruit_MPU6050 mpu;

#include "MCP3221.h"
MCP3221 mcp3221(0x4E);

#include "mcp3021.h"
byte ADDR = 0b011;  // 0x4B
MCP3021 mcp3021;
const float air_value = 561.0;
const float water_value = 293.0;
const float moisture_0 = 0.0;
const float moisture_100 = 100.0;

#include "SparkFun_SGP30_Arduino_Library.h"
SGP30 mySensor;

void setup() {
  Serial.begin(115200);
  window.attach(4);
  gates.attach(13);
  FastLED.addLeds<NEOPIXEL, LED_PIN>(leds, NUM_LEDS);
  FastLED.setBrightness(90);

  pinMode(WHITE_LED, OUTPUT);
  pinMode(WIND, OUTPUT);
  pinMode(BUTTON, INPUT);

  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());

  Wire.begin();

  if (mySensor.begin() == false) {
    Serial.println("No SGP30 Detected. Check connections.");
  }
  mySensor.initAirQuality();

  buzzer.begin(0x60);           // –° –ø–µ—Ä–µ–º—ã—á–∫–æ–π –∞–¥—Ä–µ—Å –±—É–¥–µ—Ç 0x60
  buzzer.setVoltage(0, false);  // –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞

  setBusChannel(0x04);
  lcd.begin();
  lcd.gotoxy(10, 50);  // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∫—É—Ä—Å–æ—Ä–∞
  lcd.string("Privet, MGBOT!", false);

  setBusChannel(0x04);
  lightMeter.begin();

  bool bme_status = bme280.begin();
  if (!bme_status) {
    Serial.println("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É 0—Ö77, –ø—Ä–æ–±—É—é –¥—Ä—É–≥–æ–π...");
    bme_status = bme280.begin(0x76);
    if (!bme_status)
      Serial.println("–î–∞—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
  }

  lox.init();
  lox.setTimeout(500);
  // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
  lox.setMeasurementTimingBudget(200000);

  Fire.begin();


  if (!mpu.begin(0x69)) {
    Serial.println("Failed to find MPU6050 chip");
  }
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);

  setBusChannel(0x05);
  mcp3021.begin(ADDR);
}

void handleNewMessages(int numNewMessages) {
  Serial.print("handleNewMessages ");
  Serial.println(numNewMessages);

  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = bot.messages[i].chat_id;
    String text = bot.messages[i].text;
    text.toLowerCase();
    String from_name = bot.messages[i].from_name;
    if (from_name == "")
      from_name = "Guest";

    // –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—à–µ–¥—à–µ–π –∫–æ–º–∞–Ω–¥—ã
    if (text == "/sensors")  // –∏–∑–º–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    {
      setBusChannel(0x04);
      float lux = lightMeter.readLightLevel();
      float t = bme280.readTemperature();
      float h = bme280.readHumidity();
      float p = bme280.readPressure() / 133.3F;
      float dist = lox.readRangeSingleMillimeters();
      Fire.get_ir_and_vis();
      sensors_event_t a, g, temp;
      mpu.getEvent(&a, &g, &temp);
      setBusChannel(0x05);
      float adc0 = mcp3221.getVoltage();
      float adc1 = mcp3021.readADC();
      float wl = map(adc1, air_value, water_value, moisture_0, moisture_100);
      mySensor.measureAirQuality();
      String welcome = "–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:\n-------------------------------------------\n";
      welcome += "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: " + String(t, 1) + " ¬∞C\n";
      welcome += "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: " + String(h, 0) + " %\n";
      welcome += "‚òÅ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: " + String(p, 0) + " –≥–ü–∞\n";
      welcome += "‚òÄ –û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: " + String(lux) + " –õ–∫\n";
      welcome += "üö∞ –£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã: " + String(wl, 0) + " %\n";
      welcome += "‚ò¢ –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –õ–û–°: " + String(mySensor.TVOC) + " ppb\n";
      welcome += "üå¨ –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –°–û2: " + String(mySensor.CO2) + " ppm\n";
      welcome += "üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " + String(dist, 0) + " –º–º\n";
      welcome += "accel x = " + String(a.acceleration.x) + "\n";
      welcome += "accel y = " + String(a.acceleration.y) + "\n";
      welcome += "accel z = " + String(a.acceleration.z) + "\n";
      welcome += "üî• –ò–ö-–∫–∞–Ω–∞–ª = " + String(Fire.ir_data, 0) + " –º–∫–í—Ç/—Å–º2\n";
      welcome += "üî• –í–∏–¥–∏–º—ã–π –∫–∞–Ω–∞–ª = " + String(Fire.vis_data, 0) + " –º–∫–í—Ç/—Å–º2\n";
      welcome += "üéß –£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ = " + String(adc0, 0) + "\n";
      bot.sendMessage(chat_id, welcome, "Markdown");
    }
    
    if (text == "/photo") {  // –ø–æ—Å—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      bot.sendPhoto(chat_id, test_photo_url, "–∞ –≤–æ—Ç –∏ —Ñ–æ—Ç–∫–∞!");
    }
    if (text == "/windon") {
      digitalWrite(WIND, HIGH);
      bot.sendMessage(chat_id, "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω", "");
    }
    if (text == "/windoff") {
      digitalWrite(WIND, LOW);
      bot.sendMessage(chat_id, "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω", "");
    }
    if (text == "/lighton") {
      digitalWrite(WHITE_LED, HIGH);
      bot.sendMessage(chat_id, "–û—Å–≤–µ—â–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ", "");
    }
    if (text == "/lightoff") {
      digitalWrite(WHITE_LED, LOW);
      FastLED.clear();
      FastLED.show();
      bot.sendMessage(chat_id, "–û—Å–≤–µ—â–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ", "");
    }
    if (text == "/gateon") {
      gates.write(OPENED_GATES);
      bot.sendMessage(chat_id, "–í–æ—Ä–æ—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã", "");
    }
    if (text == "/gateoff") {
      gates.write(CLOSED_GATES);
      bot.sendMessage(chat_id, "–í–æ—Ä–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç—ã", "");
    }
    if (text == "/windowon") {
      window.write(OPENED_WINDOW);
      bot.sendMessage(chat_id, "–û–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ", "");
    }
    if (text == "/windowoff") {
      window.write(CLOSED_WINDOW);
      bot.sendMessage(chat_id, "–û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ", "");
    }
    if (text == "/sound") {
      note(14, 400);
      note(2, 100);
      buzzer.setVoltage(0, false);  // –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
    }
    if (text == "/randomrgb") {
      fill_solid(leds, NUM_LEDS, CRGB(random(0, 255), random(0, 255), random(0, 255)));
      FastLED.show();
      bot.sendMessage(chat_id, "–°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω", "");
    }
    if ((text == "/start") || (text == "start") || (text == "/help") || (text == "help"))  // –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ–º–æ—â–∏
    {
      bot.sendMessage(chat_id, "–ü—Ä–∏–≤–µ—Ç, " + from_name + "!", "");
      bot.sendMessage(chat_id, "–Ø –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ô–æ—Ç–∏–∫ 32. –ö–æ–º–∞–Ω–¥—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞ –æ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞", "");
      String sms = "–ö–æ–º–∞–Ω–¥—ã:\n";
      sms += "/options - –ø—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n";
      sms += "/site - –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç\n";
      sms += "/photo - –∑–∞–ø–æ—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ\n";
      sms += "/help - –≤—ã–∑–≤–∞—Ç—å –ø–æ–º–æ—â—å\n";
      bot.sendMessage(chat_id, sms, "Markdown");
    }
    if (text == "/site")  // –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –¥–∏–∞–ª–æ–≥–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç
    {
      bot.sendMessageWithInlineKeyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", "", keyboardJson1);
    }

    if (text == "/options")  // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ø–ª–∏—Ü–µ–π
    {
      String keyboardJson = "[[\"/lighton\", \"/lightoff\"],[\"/randomrgb\",\"/sensors\"],[\"/sound\",\"/windon\", \"/windoff\"],[\"/gateon\",\"/gateoff\",\"/windowon\",\"/windowoff\"]]";
      bot.sendMessageWithReplyKeyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", "", keyboardJson, true);
    }
  }
}

void note(int type, int duration) {  // –Ω–æ—Ç–∞ (–Ω–æ—Ç–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
  switch (type) {
    case 1: ton = 1000; break;
    case 2: ton = 860; break;
    case 3: ton = 800; break;
    case 4: ton = 700; break;
    case 5: ton = 600; break;
    case 6: ton = 525; break;
    case 7: ton = 450; break;
    case 8: ton = 380; break;
    case 9: ton = 315; break;
    case 10: ton = 250; break;
    case 11: ton = 190; break;
    case 12: ton = 130; break;
    case 13: ton = 80; break;
    case 14: ton = 30; break;
    case 15: ton = 1; break;
  }
  delay(10);  // –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
  for (int i = 0; i < duration; i++) {
    buzzer.setVoltage(vol1, false);
    buzzer.setVoltage(vol2, false);
    delayMicroseconds(ton);
  }
}

void loop()  // –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
{
  if (millis() - bot_lasttime > BOT_MTBS) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while (numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }

    bot_lasttime = millis();
  }
}

bool setBusChannel(uint8_t i2c_channel) {
  if (i2c_channel >= 0x08) {
    return false;
  } else {
    Wire.beginTransmission(0x70);
    //Wire.write(i2c_channel | 0x08);  // –¥–ª—è –º–∏–∫—Ä–æ—Å—Ö–µ–º—ã PCA9547
    Wire.write(0x01 << i2c_channel);  // –î–ª—è –º–∏–∫—Ä–æ—Å—Ö–µ–º—ã PW548A*/
    Wire.endTransmission();
    return true;
  }
}